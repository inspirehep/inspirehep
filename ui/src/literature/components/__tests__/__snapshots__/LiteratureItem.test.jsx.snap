// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LiteratureItem does not arxiv pdf download action if there is no eprint value 1`] = `
<ResultItem
  leftActions={
    <React.Fragment>
      <CiteModalAction
        recordId={12345}
      />
      <Connect(EditRecordActionContainer)
        recordId={12345}
      />
    </React.Fragment>
  }
  rightActions={
    <React.Fragment>
      <ListItemAction>
        <EventTracker
          eventId="Citations:Search"
          eventPropName="onClick"
          extractEventArgsToForward={null}
        >
          <Link
            replace={false}
            to="/literature?q=refersto:recid:12345"
          >
            <IconText
              text="0 citations"
              type="login"
            />
          </Link>
        </EventTracker>
      </ListItemAction>
    </React.Fragment>
  }
>
  <Link
    className="f5"
    replace={false}
    to="/literature/12345"
  >
    <LiteratureTitle
      title={
        Immutable.Map {
          "title": "test",
        }
      }
    />
  </Link>
  <div
    className="mt1"
  >
    <AuthorsAndCollaborations
      authors={Immutable.List []}
      collaborations={Immutable.List []}
      collaborationsWithSuffix={Immutable.List []}
      enableAuthorsShowAll={false}
    />
     (
    <LiteratureDate
      date={null}
    />
    )
  </div>
  <div
    className="mt1"
  >
    <PublicationInfoList
      labeled={true}
      publicationInfo={null}
      wrapperClassName="di"
    />
    <ArxivEprintList
      eprints={null}
      wrapperClassName="di"
    />
  </div>
</ResultItem>
`;

exports[`LiteratureItem renders 0 citations if it does not exist 1`] = `
<ResultItem
  leftActions={
    <React.Fragment>
      <CiteModalAction
        recordId={12345}
      />
      <Connect(EditRecordActionContainer)
        recordId={12345}
      />
    </React.Fragment>
  }
  rightActions={
    <React.Fragment>
      <ListItemAction>
        <EventTracker
          eventId="Citations:Search"
          eventPropName="onClick"
          extractEventArgsToForward={null}
        >
          <Link
            replace={false}
            to="/literature?q=refersto:recid:12345"
          >
            <IconText
              text="0 citations"
              type="login"
            />
          </Link>
        </EventTracker>
      </ListItemAction>
    </React.Fragment>
  }
>
  <Link
    className="f5"
    replace={false}
    to="/literature/12345"
  >
    <LiteratureTitle
      title={
        Immutable.Map {
          "title": "test",
        }
      }
    />
  </Link>
  <div
    className="mt1"
  >
    <AuthorsAndCollaborations
      authors={Immutable.List []}
      collaborations={Immutable.List []}
      collaborationsWithSuffix={Immutable.List []}
      enableAuthorsShowAll={false}
    />
     (
    <LiteratureDate
      date={null}
    />
    )
  </div>
  <div
    className="mt1"
  >
    <PublicationInfoList
      labeled={true}
      publicationInfo={null}
      wrapperClassName="di"
    />
    <ArxivEprintList
      eprints={null}
      wrapperClassName="di"
    />
  </div>
</ResultItem>
`;

exports[`LiteratureItem renders with all props set, including sub props 1`] = `
<ResultItem
  leftActions={
    <React.Fragment>
      <ArxivPdfDownloadAction
        arxivId="1234567890"
      />
      <CiteModalAction
        recordId={12345}
      />
      <Connect(EditRecordActionContainer)
        recordId={12345}
      />
    </React.Fragment>
  }
  rightActions={
    <React.Fragment>
      <ListItemAction>
        <EventTracker
          eventId="Citations:Search"
          eventPropName="onClick"
          extractEventArgsToForward={null}
        >
          <Link
            replace={false}
            to="/literature?q=refersto:recid:12345"
          >
            <IconText
              text="1 citations"
              type="login"
            />
          </Link>
        </EventTracker>
      </ListItemAction>
    </React.Fragment>
  }
>
  <Link
    className="f5"
    replace={false}
    to="/literature/12345"
  >
    <LiteratureTitle
      title={
        Immutable.Map {
          "title": "test",
        }
      }
    />
  </Link>
  <div
    className="mt1"
  >
    <AuthorsAndCollaborations
      authors={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Author",
          },
        ]
      }
      collaborations={
        Immutable.List [
          Immutable.Map {
            "value": "CMS",
          },
        ]
      }
      collaborationsWithSuffix={
        Immutable.List [
          Immutable.Map {
            "value": "CMS Group",
          },
        ]
      }
      enableAuthorsShowAll={false}
    />
     (
    <LiteratureDate
      date="Jun 7, 1993"
    />
    )
  </div>
  <div
    className="mt1"
  >
    <PublicationInfoList
      labeled={true}
      publicationInfo={
        Immutable.List [
          Immutable.Map {
            "journal_title": "Test Jornal",
          },
        ]
      }
      wrapperClassName="di"
    />
    <span>
       â€¢ 
    </span>
    <ArxivEprintList
      eprints={
        Immutable.List [
          Immutable.Map {
            "value": "1234567890",
          },
        ]
      }
      wrapperClassName="di"
    />
  </div>
</ResultItem>
`;
