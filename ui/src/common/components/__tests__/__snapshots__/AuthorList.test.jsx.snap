// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuthorList prefixes \`Supervisor\` when 1 supervisor is passed 1`] = `
<div
  className="__InlineList__"
>
  <ul>
    <li
      key="Test, Guy 1"
    >
      <Author
        author={
          Immutable.Map {
            "full_name": "Test, Guy 1",
          }
        }
      />
    </li>
  </ul>
</div>
`;

exports[`AuthorList prefixes \`Supervisor\` when 2 or more supervisors are passed 1`] = `
<div
  className="__InlineList__"
>
  <ul>
    <li
      key="Test, Guy 1"
    >
      <Author
        author={
          Immutable.Map {
            "full_name": "Test, Guy 1",
          }
        }
      />
      , 
    </li>
    <li
      key="Test, Guy 2"
    >
      <Author
        author={
          Immutable.Map {
            "full_name": "Test, Guy 2",
          }
        }
      />
    </li>
  </ul>
</div>
`;

exports[`AuthorList renders all authors if they are less than the limit without suffix 1`] = `
<Fragment>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
        Immutable.Map {
          "full_name": "Test, Guy 2",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={null}
    wrapperClassName={null}
  />
  <Modal
    confirmLoading={false}
    footer={null}
    okType="primary"
    onCancel={[Function]}
    open={false}
    title="2 authors"
    visible={false}
    width="50%"
  >
    <InlineList
      extractKey={[Function]}
      items={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Guy 1",
          },
          Immutable.Map {
            "full_name": "Test, Guy 2",
          },
        ]
      }
      label={null}
      renderItem={[Function]}
      separateItems={true}
      separator=", "
      suffix={null}
      wrapperClassName={null}
    />
  </Modal>
</Fragment>
`;

exports[`AuthorList renders authors by using AuthorLink 1`] = `
<div
  className="__InlineList__"
>
  <ul>
    <li
      key="Test, Guy 1"
    >
      <Author
        author={
          Immutable.Map {
            "full_name": "Test, Guy 1",
          }
        }
      />
    </li>
  </ul>
</div>
`;

exports[`AuthorList renders only 5 authors and suffixes "et al." if passed more 1`] = `
<Fragment>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
        Immutable.Map {
          "full_name": "Test, Guy 2",
        },
        Immutable.Map {
          "full_name": "Test, Guy 3",
        },
        Immutable.Map {
          "full_name": "Test, Guy 4",
        },
        Immutable.Map {
          "full_name": "Test, Guy 5",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={
      <span>
         et al.
      </span>
    }
    wrapperClassName={null}
  />
  <Modal
    confirmLoading={false}
    footer={null}
    okType="primary"
    onCancel={[Function]}
    open={false}
    title="6 authors"
    visible={false}
    width="50%"
  >
    <InlineList
      extractKey={[Function]}
      items={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Guy 1",
          },
          Immutable.Map {
            "full_name": "Test, Guy 2",
          },
          Immutable.Map {
            "full_name": "Test, Guy 3",
          },
          Immutable.Map {
            "full_name": "Test, Guy 4",
          },
          Immutable.Map {
            "full_name": "Test, Guy 5",
          },
          Immutable.Map {
            "full_name": "Test, Guy 6",
          },
        ]
      }
      label={null}
      renderItem={[Function]}
      separateItems={true}
      separator=", "
      suffix={null}
      wrapperClassName={null}
    />
  </Modal>
</Fragment>
`;

exports[`AuthorList renders only 5 authors and suffixes "show all" if passed more 1`] = `
<Fragment>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
        Immutable.Map {
          "full_name": "Test, Guy 2",
        },
        Immutable.Map {
          "full_name": "Test, Guy 3",
        },
        Immutable.Map {
          "full_name": "Test, Guy 4",
        },
        Immutable.Map {
          "full_name": "Test, Guy 5",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={
      <div
        className="di pl1"
      >
        <SecondaryButton
          onClick={[Function]}
        >
          Show All(
          6
          )
        </SecondaryButton>
      </div>
    }
    wrapperClassName={null}
  />
  <Modal
    confirmLoading={false}
    footer={null}
    okType="primary"
    onCancel={[Function]}
    open={false}
    title="6 authors"
    visible={false}
    width="50%"
  >
    <InlineList
      extractKey={[Function]}
      items={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Guy 1",
          },
          Immutable.Map {
            "full_name": "Test, Guy 2",
          },
          Immutable.Map {
            "full_name": "Test, Guy 3",
          },
          Immutable.Map {
            "full_name": "Test, Guy 4",
          },
          Immutable.Map {
            "full_name": "Test, Guy 5",
          },
          Immutable.Map {
            "full_name": "Test, Guy 6",
          },
        ]
      }
      label={null}
      renderItem={[Function]}
      separateItems={true}
      separator=", "
      suffix={null}
      wrapperClassName={null}
    />
  </Modal>
</Fragment>
`;

exports[`AuthorList renders only limited (prop) authors and suffixes "et all." if passed more 1`] = `
<Fragment>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
        Immutable.Map {
          "full_name": "Test, Guy 2",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={
      <span>
         et al.
      </span>
    }
    wrapperClassName={null}
  />
  <Modal
    confirmLoading={false}
    footer={null}
    okType="primary"
    onCancel={[Function]}
    open={false}
    title="3 authors"
    visible={false}
    width="50%"
  >
    <InlineList
      extractKey={[Function]}
      items={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Guy 1",
          },
          Immutable.Map {
            "full_name": "Test, Guy 2",
          },
          Immutable.Map {
            "full_name": "Test, Guy 3",
          },
        ]
      }
      label={null}
      renderItem={[Function]}
      separateItems={true}
      separator=", "
      suffix={null}
      wrapperClassName={null}
    />
  </Modal>
</Fragment>
`;

exports[`AuthorList renders only limited (prop) authors and suffixes "show all." if passed more 1`] = `
<Fragment>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
        Immutable.Map {
          "full_name": "Test, Guy 2",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={
      <div
        className="di pl1"
      >
        <SecondaryButton
          onClick={[Function]}
        >
          Show All(
          3
          )
        </SecondaryButton>
      </div>
    }
    wrapperClassName={null}
  />
  <Modal
    confirmLoading={false}
    footer={null}
    okType="primary"
    onCancel={[Function]}
    open={false}
    title="3 authors"
    visible={false}
    width="50%"
  >
    <InlineList
      extractKey={[Function]}
      items={
        Immutable.List [
          Immutable.Map {
            "full_name": "Test, Guy 1",
          },
          Immutable.Map {
            "full_name": "Test, Guy 2",
          },
          Immutable.Map {
            "full_name": "Test, Guy 3",
          },
        ]
      }
      label={null}
      renderItem={[Function]}
      separateItems={true}
      separator=", "
      suffix={null}
      wrapperClassName={null}
    />
  </Modal>
</Fragment>
`;

exports[`AuthorList should display \`authors\` in modal title by default 1`] = `
<Modal
  confirmLoading={false}
  footer={null}
  okType="primary"
  onCancel={[Function]}
  open={false}
  title="1 authors"
  visible={false}
  width="50%"
>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={null}
    wrapperClassName={null}
  />
</Modal>
`;

exports[`AuthorList should show \`supervisors\` in modal title if supervisors are passed 1`] = `
<Modal
  confirmLoading={false}
  footer={null}
  okType="primary"
  onCancel={[Function]}
  open={false}
  title="1 authors"
  visible={false}
  width="50%"
>
  <InlineList
    extractKey={[Function]}
    items={
      Immutable.List [
        Immutable.Map {
          "full_name": "Test, Guy 1",
        },
      ]
    }
    label={null}
    renderItem={[Function]}
    separateItems={true}
    separator=", "
    suffix={null}
    wrapperClassName={null}
  />
</Modal>
`;
