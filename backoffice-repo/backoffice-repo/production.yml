version: "3"

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}

services:
  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile

    image: backoffice_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/docker/.django
      - ./.envs/docker/.postgres
    command: sh -c 'poetry run python manage.py migrate && poetry run python manage.py runserver 0.0.0.0:8000'

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: backoffice_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/docker/.postgres

  redis:
    image: redis:6

  celeryworker:
    <<: *django
    image: backoffice_production_celeryworker
    depends_on:
      - redis
      - postgres
    ports: []
    command: celery -A config.celery_app worker -l INFO
    networks:
      - djangonetwork

  celerybeat:
    <<: *django
    image: backoffice_production_celerybeat
    command: celery -A config.celery_app beat -l INFO
    depends_on:
      - redis
      - postgres
    ports: []
    networks:
      - djangonetwork

  mq:
    image: rabbitmq:3.9.11-management
    restart: "always"
    container_name: backofficee_production_mq
    ports:
      - "5672:5672"
    networks:
      - djangonetwork

networks:
  djangonetwork:
    driver: bridge
