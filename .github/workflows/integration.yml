name: Integration

on:
  push:
    branches: [master]
  pull_request_target:
    branches: [master]

env:
  REF: ${{ github.event.pull_request.head.sha || github.sha }}
  REF_TAG: ref-${{ github.event.pull_request.head.sha || github.sha }}
  PR: ${{ github.event.pull_request.number }}
  PR_TAG: pr-${{ github.event.pull_request.number }}
  BUILD_TAG: build-${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  changed:
    name: Group changes by app
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      ui: ${{ steps.filter.outputs.ui }}
      editor: ${{ steps.filter.outputs.editor }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Filter changes
        uses: tony84727/changed-file-filter@0.0.3
        id: filter
        with:
          filters: |
            backend: ['backend/**/*', '.github/**/*']
            ui: ['ui/**/*', '.github/**/*']
            editor: ['record-editor/**/*', '.github/**/*']

  backend_build:
    name: Backend build
    runs-on: ubuntu-latest
    outputs:
      random-seed: ${{ steps.random.outputs.random-number }}
    needs: changed
    if: ${{ needs.changed.outputs.backend == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: ./.github/actions/backend-build
        with:
          lock-hash: ${{ hashFiles('backend/poetry.lock', 'backend/pyproject.yaml', 'backend/Dockerfile') }}

      - name: Generate random seed
        uses: ./.github/actions/random-number
        id: random

  ui_build:
    name: UI build
    runs-on: ubuntu-latest
    needs: changed
    if: ${{ needs.changed.outputs.ui == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: ./.github/actions/docker-two-stages-build
        with:
          image: inspirehep/ui
          context: ui/

  editor_build:
    name: Editor build
    runs-on: ubuntu-latest
    needs: changed
    if: ${{ needs.changed.outputs.editor == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: ./.github/actions/docker-two-stages-build
        with:
          image: inspirehep/editor
          context: record-editor/

  backend_integration_test:
    name: Backend integration test
    runs-on: ubuntu-latest
    needs: backend_build
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2, 3, 4, 5, 6]
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: inspirehep
          POSTGRES_PASSWORD: inspirehep
          POSTGRES_DB: inspirehep
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
      elasticsearch:
        image: inspirehep/elasticsearch:7.1.1
        env:
          bootstrap.memory_lock: true
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          discovery.type: single-node
        ports:
          - 9200:9200
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Get durations from cache
        uses: actions/cache@v2
        with:
          path: test_durations
          key: integration-test-durations-split-${{ github.run_id }}-${{ github.run_number }}-${{ matrix.group }}
          restore-keys: |
            integration-test-durations-combined-${{ env.REF }}
            integration-test-durations-combined

      - name: Test
        uses: ./.github/actions/backend-test
        with:
          suite: 'integration --splits 6 --group ${{ matrix.group }} --durations-path test_durations/durations.json --store-durations --random-order-seed ${{ needs.backend_build.outputs.random-seed }}'
      - name: Upload partial durations
        uses: actions/upload-artifact@v2
        with:
          name: split-${{ matrix.group }}
          path: test_durations

  update_integration_durations:
    name: Combine and update integration test durations
    runs-on: ubuntu-latest
    needs: backend_integration_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Get durations from cache
        uses: actions/cache@v2
        with:
          path: test_durations
          key: integration-test-durations-combined-${{ env.REF }}
          restore-keys: integration-test-durations-combined

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Combine test durations
        uses: ./.github/actions/combine-durations
        with:
          durations-path: test_durations/durations.json
          split-prefix: split-

  backend_integration_async_test:
    name: Backend integration async test
    runs-on: ubuntu-latest
    needs: backend_build
    strategy:
      fail-fast: false
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:9.6
        env:
          POSTGRES_USER: inspirehep
          POSTGRES_PASSWORD: inspirehep
          POSTGRES_DB: inspirehep
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
      elasticsearch:
        image: inspirehep/elasticsearch:7.1.1
        env:
          bootstrap.memory_lock: true
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          discovery.type: single-node
        ports:
          - 9200:9200
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Test
        uses: ./.github/actions/backend-test
        with:
          suite: integration-async

  backend_unit_test:
    name: Backend unit test
    runs-on: ubuntu-latest
    needs: backend_build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Test
        uses: ./.github/actions/backend-test
        with:
          suite: unit

  ui_test:
    name: UI test
    runs-on: ubuntu-latest
    needs: ui_build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Test
        uses: ./.github/actions/ui-test

  editor_test:
    name: Editor test
    runs-on: ubuntu-latest
    needs: editor_build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Test
        uses: ./.github/actions/editor-test

  end_to_end_test:
    name: End to end test
    runs-on: ubuntu-latest
    needs:
      - backend_build
      - ui_build
      - editor_build
    if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}
    outputs:
      backend_image: ${{ steps.set-backend-image.outputs.image }}
      ui_image: ${{ steps.set-ui-image.outputs.image }}
      editor_image: ${{ steps.set-editor-image.outputs.image }}
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgresql:
        image: postgres:9.6
        env:
          POSTGRES_USER: inspirehep
          POSTGRES_PASSWORD: inspirehep
          POSTGRES_DB: inspirehep
        ports:
          - 5432:5432
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
      elasticsearch:
        image: inspirehep/elasticsearch:7.1.1
        env:
          bootstrap.memory_lock: true
          ES_JAVA_OPTS: -Xms1024m -Xmx1024m
          discovery.type: single-node
        ports:
          - 9200:9200
    env:
      INVENIO_DEBUG: True
      INVENIO_MAIL_DEBUG: 1
      INVENIO_ACCOUNTS_SESSION_REDIS_URL: redis://localhost:6379/2
      INVENIO_BROKER_URL: amqp://guest:guest@localhost:5672/
      INVENIO_CACHE_REDIS_URL: redis://localhost:6379/0
      INVENIO_CACHE_TYPE: redis
      INVENIO_CELERY_BROKER_URL: amqp://guest:guest@localhost:5672/
      INVENIO_CELERY_RESULT_BACKEND: redis://localhost:6379/1
      INVENIO_SEARCH_ELASTIC_HOSTS: "['localhost:9200']"
      INVENIO_SECRET_KEY: CHANGE_ME
      INVENIO_SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://inspirehep:inspirehep@localhost:5432/inspirehep
      INVENIO_INSPIRE_NEXT_URL: http://localhost:5000
      APP_DEBUG: True
      APP_MAIL_DEBUG: 1
      APP_SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://inspirehep:inspirehep@localhost:5432/inspirehep
      APP_CELERY_BROKER_URL: amqp://guest:guest@localhost:5672/
      APP_CELERY_RESULT_BACKEND: redis://localhost:6379/1
      APP_CACHE_REDIS_URL: redis://localhost:6379/0
      APP_ACCOUNTS_SESSION_REDIS_URL: redis://localhost:6379/2
      APP_SEARCH_ELASTIC_HOSTS: "['localhost:9200']"
      APP_ES_BULK_TIMEOUT: 240
      APP_DANGEROUSLY_ENABLE_LOCAL_LOGIN: True
      APP_ENABLE_SECURE_HEADERS: False
      APP_SECRET_KEY: CHANGE_ME
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}

      - name: Set backend image
        id: set-backend-image
        run: |
          image=${{ needs.backend_build.result == 'skipped' && 'master' || env.REF_TAG }}
          echo "output: $image"
          echo "BACKEND_IMAGE=${image}" >> $GITHUB_ENV
          echo "::set-output name=image::${image}"

      - name: Set ui image
        id: set-ui-image
        run: |
          image=${{ needs.ui_build.result == 'skipped' && 'master' || env.REF_TAG }}
          echo "output: $image"
          echo "UI_IMAGE=${image}" >> $GITHUB_ENV
          echo "::set-output name=image::${image}"

      - name: Set editor image
        id: set-editor-image
        run: |
          image=${{ needs.editor_build.result == 'skipped' && 'master' || env.REF_TAG }}
          echo "output: $image"
          echo "EDITOR_IMAGE=${image}" >> $GITHUB_ENV
          echo "::set-output name=image::${image}"

      - name: Check outputs
        run: |
          echo "${{ steps.set-editor-image.outputs.image }}"
          echo "${{ steps.set-ui-image.outputs.image }}"
          echo "${{ steps.set-backend-image.outputs.image }}"

      - name: Start hep worker container
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/hep:${{ env.BACKEND_IMAGE }}
          name: hep-worker
          env_pattern: 'INVENIO_'
          options: --entrypoint celery
          command: >
            worker
            -E
            -A inspirehep.celery
            -l INFO
            --purge
            --queues celery,migrator,indexer_task,matcher,assign
      - name: Start hep web container
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/hep:${{ env.BACKEND_IMAGE }}
          name: hep-web
          env_pattern: 'INVENIO_'
          options: --entrypoint gunicorn
          command: >
            -t 99999
            -b 0.0.0.0:8000
            --access-logfile "-"
            --error-logfile "-"
            inspirehep.wsgi:application
      - name: Start next worker container
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/next:latest
          name: next-worker
          env_pattern: 'APP_'
          options: --entrypoint celery
          command: >
            worker
            -E
            -A inspirehep.celery
            --loglevel=INFO
            --purge
            --queues celery,orcid_push,indexer_task
      - name: Start next web container
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/next-assets:latest
          name: next-web
          env_pattern: 'APP_'
          options: --entrypoint gunicorn
          command: >
            -b 0.0.0.0:5000
            --access-logfile "-"
            --log-level debug
            inspirehep.wsgi
      - name: Start editor
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/editor:${{ env.EDITOR_IMAGE }}
          name: record-editor

      - name: Start UI
        id: start-ui
        uses: ./.github/actions/docker-start-container
        with:
          image: inspirehep/ui:${{ env.UI_IMAGE }}
          name: ui
          options: --add-host=hep-web:127.0.0.1 --add-host=next-web:127.0.0.1 --add-host=record-editor:127.0.0.1 --mount type=bind,source=${{ github.workspace }}/ui/docker/nginx/config/local.conf,destination=/etc/nginx/conf.d/default.conf

      - name: Setup
        run: |
          docker exec hep-web ./scripts/setup
          docker exec next-web inspirehep db create
      - name: Import dataset
        run: >
          docker exec hep-web inspirehep importer records
          -f data/records/authors/1010819.json
          -f data/records/conferences/1769332.json
          -f data/records/conferences/1794610.json
          -f data/records/conferences/1809034.json
          -f data/records/conferences/1776122.json
          -f data/records/conferences/1622944.json
          -f data/records/seminars/1811573.json
          -f data/records/seminars/1811750.json
          -f data/records/seminars/1811657.json
          -f data/records/seminars/1807692.json
          -f data/records/seminars/1807690.json
          -f data/records/jobs/1811684.json
          -f data/records/jobs/1812904.json
          -f data/records/jobs/1813119.json
          -f data/records/jobs/1811836.json
          -f data/records/jobs/1812529.json
          -f data/records/authors/1004662.json
          -f data/records/authors/1060898.json
          -f data/records/authors/1013725.json
          -f data/records/authors/1078577.json
          -f data/records/authors/1064002.json
          -f data/records/authors/1306569.json
          -f data/records/conferences/1787117.json
          -f data/records/literature/1787272.json
          -f data/records/seminars/1799778.json
          -f data/records/conferences/1217045.json
          -f data/records/jobs/1812440.json
          -f data/records/authors/1274753.json
          -f data/records/institutions/902858.json
          -f data/records/experiments/1513946.json
          -f data/records/literature/1331798.json
          -f data/records/literature/1325985.json
          -f data/records/literature/1306493.json
          -f data/records/literature/1264675.json
          -f data/records/literature/1263659.json
          -f data/records/literature/1263207.json
          -f data/records/literature/1249881.json
          -f data/records/literature/1235543.json
          -f data/records/literature/1198168.json
          -f data/records/literature/1113908.json
          -f data/records/literature/873915.json
          -f data/records/literature/1688995.json
          -f data/records/literature/1290484.json
          -f data/records/literature/1264013.json
          -f data/records/literature/1257993.json
          -f data/records/literature/1310649.json
          -f data/records/literature/1473056.json
          -f data/records/literature/1358394.json
          -f data/records/literature/1374620.json
          -f data/records/literature/1452707.json
          -f data/records/literature/1649231.json
          -f data/records/literature/1297062.json
          -f data/records/literature/1313615.json
          -f data/records/literature/1597429.json
          -f data/records/literature/1184194.json
          -f data/records/literature/1322719.json
          -f data/records/literature/1515024.json
          -f data/records/literature/1510263.json
          -f data/records/literature/1415120.json
          -f data/records/literature/1400808.json
          -f data/records/literature/1420712.json
          -f data/records/literature/1492108.json
          -f data/records/literature/1598135.json
          -f data/records/literature/1306493.json
          -f data/records/literature/1383683.json
          -f data/records/literature/1238110.json
      - name: Run Cypress
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        with:
          working-directory: ./e2e
          record: true
          browser: chrome
          headless: true
          env: inspirehep_url=http://localhost:8080

      - name: Write container logs
        if: ${{ always() }}
        run: |
          for i in $( docker ps -aq ); do
            name="$( docker inspect --format='{{ .Name }}' $i)"
            name=${name:-$i} # Default to the id if no name is found
            name=${name#/} # Remove any leading '/'
            docker logs $i >${name}.log
          done
      - name: Upload container logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: container-logs-${{ env.REF }}
          path: '*.log'

  to_push:
    name: To Push
    runs-on: ubuntu-latest
    if: ${{ !failure() && needs.end_to_end_test.result == 'success' }}
    needs:
      - backend_integration_test
      - backend_integration_async_test
      - backend_unit_test
      - ui_test
      - editor_test
      - end_to_end_test
    outputs:
      images: ${{ steps.generate_matrix.outputs.images }}
    env:
      BACKEND_INTEGRATION_TEST: ${{ needs.backend_integration_test.result == 'success' }}
      BACKEND_INTEGRATION_ASYNC_TEST: ${{ needs.backend_integration_async_test.result == 'success' }}
      BACKEND_UNIT_TEST: ${{ needs.backend_unit_test.result == 'success' }}
      UI_TEST: ${{ needs.ui_test.result == 'success' }}
      EDITOR_TEST: ${{ needs.editor_test.result == 'success' }}
    steps:
      - name: Generate matrix
        id: generate_matrix
        run: |
          images=''

          if [ "$BACKEND_INTEGRATION_TEST" = 'true' ] \
          && [ "$BACKEND_INTEGRATION_ASYNC_TEST" = 'true' ] \
          && [ "$BACKEND_UNIT_TEST" = 'true' ]; then
            images=($images 'inspirehep/hep')
          fi

          if [ "$UI_TEST" = 'true' ]; then
            images=($images 'inspirehep/ui')
          fi

          if [ "$EDITOR_TEST" = 'true' ]; then
            images=($images 'inspirehep/editor')
          fi

          json=$(printf '%s\n' "${images[@]}" | jq -R . | jq -sc .)
          echo "output: $json"
          echo '::set-output name=images::'$json

  push_changed:
    name: Push images that changed
    runs-on: ubuntu-latest
    needs: to_push
    if: ${{ !failure() && needs.to_push.result == 'success' }}
    strategy:
      matrix:
        images: ${{ fromJson(needs.to_push.outputs.images) }}
        tags: [latest, build-latest]
        exclude:
          - images: inspirehep/hep
            tags: build-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}
          fetch-depth: 0

      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ECHO TAG
        if: ${{ github.event_name == 'push' }}
        run: |
          echo ${{ env.REF_TAG }}
          echo $REF_TAG

      - name: Tag and push (pr)
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'pull_request_target' }}
        with:
          image: ${{ matrix.images }}
          pull-tag: ${{ env.REF_TAG }}
          push-tag: ${{ env.PR_TAG }}

      - name: Generate tag
        id: generate_tag
        if: ${{ github.event_name == 'push'  }}
        run: |
          echo "::set-output name=tag::$(git describe --always --tags)"

      - name: Tag and push (git describe)
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push'  }}
        with:
          image: ${{ matrix.images }}
          pull-tag: ${{ env.REF_TAG }}
          push-tag: ${{ steps.generate_tag.outputs.tag }}

      - name: Tag and push (latest)
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push'  }}
        with:
          image: ${{ matrix.images }}
          pull-tag: ${{ env.REF_TAG }}
          push-tag: latest

      - name: Tag and push (master)
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push' }}
        with:
          image: ${{ matrix.images }}
          pull-tag: ${{ env.REF_TAG }}
          push-tag: master

      - name: Deploy QA
        uses: peter-evans/repository-dispatch@v1
        if: ${{ github.event_name == 'push'}}
        with:
          token: ${{ secrets.INSPIRE_BOT_TOKEN }}
          repository: inspirehep/kubernetes
          event-type: deploy
          client-payload: '{"environment":"qa","image":"${{ matrix.images }}","tag":"${{ steps.generate_tag.outputs.tag }}"}'

  push:
    name: Push commit SHA to all images
    runs-on: ubuntu-latest
    needs: end_to_end_test
    if: ${{ !failure() && needs.end_to_end_test.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REF }}
          fetch-depth: 0

      - name: Push check
        run: |
          echo ${{ needs.end_to_end_test.outputs.backend_image }}
          echo ${{ needs.end_to_end_test.outputs.ui_image }}
          echo ${{ needs.end_to_end_test.outputs.editor_image }}

      - name: Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push latest for hep
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push' }}
        with:
          image: inspirehep/hep
          pull-tag: ${{ needs.end_to_end_test.outputs.backend_image }}
          push-tag: master-${{ env.REF }}

      - name: Tag and push latest for ui
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push' }}
        with:
          image: inspirehep/ui
          pull-tag: ${{ needs.end_to_end_test.outputs.ui_image }}
          push-tag: master-${{ env.REF }}

      - name: Tag and push latest for hep
        uses: ./.github/actions/docker-tag-and-push
        if: ${{ github.event_name == 'push' }}
        with:
          image: inspirehep/editor
          pull-tag: ${{ needs.end_to_end_test.outputs.editor_image }}
          push-tag: master-${{ env.REF }}
